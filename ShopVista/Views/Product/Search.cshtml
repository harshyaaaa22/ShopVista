@model ProductSearchViewModel
@{
    ViewData["Title"] = "Product Search";
}

<style>
    /* Modern e-commerce styling with animations */
    body {
        background-color: #f9f9f9;
        font-family: 'Poppins', sans-serif;
        color: #333;
    }

    .search-container {
        padding: 40px 0;
        background: linear-gradient(135deg, #ffffff 0%, #f3f4f6 100%);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
        margin-bottom: 40px;
        transform: translateY(20px);
        opacity: 0;
        animation: slideInUp 0.6s ease forwards;
    }

    @@keyframes slideInUp {
        to

    {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .search-title {
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 30px;
        text-align: center;
        position: relative;
        padding-bottom: 15px;
    }

        .search-title:after {
            content: '';
            position: absolute;
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, #6366f1, #a855f7);
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
        }

    .search-form {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .input-wrapper {
        position: relative;
        margin-bottom: 20px;
    }

    .search-input {
        width: 100%;
        padding: 15px 20px 15px 50px;
        border: 2px solid #e2e8f0;
        border-radius: 50px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03);
        background-color: white;
    }

        .search-input:focus {
            border-color: #6366f1;
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
            outline: none;
        }

    .search-icon {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: #a0aec0;
        transition: color 0.3s ease;
    }

    .input-wrapper:focus-within .search-icon {
        color: #6366f1;
    }

    .search-btn {
        background: linear-gradient(90deg, #6366f1, #a855f7);
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 50px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(99, 102, 241, 0.3);
        position: relative;
        overflow: hidden;
        width: 100%;
    }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 15px rgba(99, 102, 241, 0.4);
        }

        .search-btn:after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: -100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.3s;
        }

        .search-btn:hover:after {
            left: 100%;
        }

    /* Products grid styling */
    .products-container {
        padding: 20px 0;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 30px;
        margin-top: 30px;
    }

    .product-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        opacity: 0;
        transform: translateY(30px);
    }

        /* Animation for cards to appear sequentially */
        .product-card:nth-child(1) {
            animation: fadeInUp 0.5s 0.1s forwards;
        }

        .product-card:nth-child(2) {
            animation: fadeInUp 0.5s 0.2s forwards;
        }

        .product-card:nth-child(3) {
            animation: fadeInUp 0.5s 0.3s forwards;
        }

        .product-card:nth-child(4) {
            animation: fadeInUp 0.5s 0.4s forwards;
        }

        .product-card:nth-child(5) {
            animation: fadeInUp 0.5s 0.5s forwards;
        }

        .product-card:nth-child(6) {
            animation: fadeInUp 0.5s 0.6s forwards;
        }

        .product-card:nth-child(n+7) {
            animation: fadeInUp 0.5s 0.7s forwards;
        }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }

    .product-image {
        height: 200px;
        overflow: hidden;
        position: relative;
    }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.6s ease;
        }

    .product-card:hover .product-image img {
        transform: scale(1.1);
    }

    .product-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        background: #ef4444;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        opacity: 0;
        transform: translateX(20px);
        animation: slideIn 0.3s 0.5s forwards;
    }

    @@keyframes slideIn {
        to

    {
        opacity: 1;
        transform: translateX(0);
    }

    }

    .product-content {
        padding: 20px;
    }

    .product-category {
        font-size: 12px;
        color: #6366f1;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .product-title {
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 10px;
        color: #2d3748;
        transition: color 0.3s ease;
    }

    .product-card:hover .product-title {
        color: #6366f1;
    }

    .product-description {
        color: #718096;
        font-size: 14px;
        margin-bottom: 15px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-price-container {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .product-price {
        font-weight: 700;
        font-size: 18px;
        color: #2d3748;
    }

    .product-old-price {
        text-decoration: line-through;
        color: #a0aec0;
        font-size: 14px;
        margin-left: 10px;
    }

    .product-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .view-btn {
        padding: 8px 20px;
        background: linear-gradient(90deg, #6366f1, #a855f7);
        color: white;
        border-radius: 50px;
        font-size: 14px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        position: relative;
        overflow: hidden;
    }

        .view-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);
        }

        .view-btn:after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: -100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.3s;
        }

        .view-btn:hover:after {
            left: 100%;
        }

    .action-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background: #f1f5f9;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #64748b;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .action-icon:hover {
            background: #6366f1;
            color: white;
            transform: translateY(-3px);
        }

    .no-results {
        background: white;
        border-radius: 15px;
        padding: 30px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        animation: fadeIn 0.5s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    .no-results-icon {
        font-size: 48px;
        color: #e2e8f0;
        margin-bottom: 15px;
    }

    .no-results-title {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 10px;
    }

    .no-results-message {
        color: #718096;
        margin-bottom: 20px;
    }

    .filters-section {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 10px;
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s 0.3s forwards;
    }

    .filter-tag {
        padding: 6px 14px;
        background: white;
        border-radius: 50px;
        font-size: 13px;
        color: #64748b;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        border: 1px solid #e2e8f0;
    }

        .filter-tag:hover, .filter-tag.active {
            background: #6366f1;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(99, 102, 241, 0.2);
            border-color: #6366f1;
        }

        .filter-tag.active {
            padding-right: 28px;
            position: relative;
        }

            .filter-tag.active:after {
                content: '✕';
                position: absolute;
                right: 12px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 10px;
            }

    .results-count {
        font-size: 14px;
        color: #64748b;
        margin-left: auto;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .products-grid

    {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .search-container {
        padding: 30px 0;
    }

    }

    @@media (max-width: 576px) {
        .products-grid

    {
        grid-template-columns: 1fr;
    }

    .search-btn {
        margin-top: 15px;
    }

    .results-count {
        width: 100%;
        margin-top: 10px;
        text-align: center;
    }

    }
</style>

<!-- Preload necessary resources -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<div class="container">
    <div class="search-container">
        <h2 class="search-title">Find Your Perfect Products</h2>

        <form asp-action="Search" method="get" class="search-form">
            <div class="row">
                <div class="col-md-9">
                    <div class="input-wrapper">
                        <i class="fas fa-search search-icon"></i>
                        <input asp-for="SearchTerm" class="search-input" placeholder="Search for products, brands, or categories..." autocomplete="off" />
                    </div>
                </div>

                <div class="col-md-3">
                    <button type="submit" class="search-btn">
                        <span>Search</span>
                    </button>
                </div>
            </div>
        </form>
    </div>

    @if (Model?.Products != null)
    {
        <div class="products-container">
            <div class="filters-section">
                @if (!string.IsNullOrEmpty(Model.SearchTerm))
                {
                    <div class="filter-tag active">
                        Search: @Model.SearchTerm
                    </div>
                }

                <div class="filter-tag">Price: Low to High</div>
                <div class="filter-tag">Price: High to Low</div>
                <div class="filter-tag">Newest First</div>
                <div class="filter-tag">Top Rated</div>

                @if (Model.Products.Any())
                {
                    <div class="results-count">
                        Showing @Model.Products.Count() results
                    </div>
                }
            </div>

            @if (Model.Products.Any())
            {
                <div class="products-grid">
                    @foreach (var product in Model.Products)
                    {
                        <div class="product-card">
                            <div class="product-image">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="@product.ImageUrl" alt="@product.Name" loading="lazy">
                                }
                                else
                                {
                                    <img src="/images/product-placeholder.jpg" alt="@product.Name" loading="lazy">
                                }

                                
                            </div>

                            <div class="product-content">
                                <div class="product-category">@product.Category?.Name</div>
                                <h3 class="product-title">@product.Name</h3>
                                <p class="product-description">@product.Description</p>

                                <div class="product-price-container">
                                    <span class="product-price">@product.Price.ToString("C")</span>
                                    @if (product.OldPrice.HasValue)
                                    {
                                        <span class="product-old-price">@product.OldPrice.Value.ToString("C")</span>
                                    }
                                </div>

                                <div class="product-actions">
                                    <a asp-action="Details" asp-route-id="@product.Id" class="view-btn">View Details</a>
                                    <div class="action-icons">
                                        <span class="action-icon add-to-cart-icon" data-product-id="@product.Id">
                                            <i class="fas fa-shopping-cart"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-results">
                    <div class="no-results-icon">
                        <i class="fas fa-search"></i>
                    </div>
                    <h3 class="no-results-title">No matching products found</h3>
                    <p class="no-results-message">
                        We couldn't find any products matching your search criteria.
                        Try using different keywords or browse our categories.
                    </p>
                    <a asp-action="Index" asp-controller="Home" class="view-btn">
                        Browse All Products
                    </a>
                </div>
            }
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add animation to search input
        const searchInput = document.querySelector('.search-input');
        if (searchInput) {
            searchInput.addEventListener('focus', function() {
                this.parentElement.classList.add('input-focus');
            });

            searchInput.addEventListener('blur', function() {
                this.parentElement.classList.remove('input-focus');
            });
        }

        // Filter tags interactivity
        const filterTags = document.querySelectorAll('.filter-tag:not(.active)');
        filterTags.forEach(tag => {
            tag.addEventListener('click', function() {
                // This would normally filter the products
                // For demo purposes, just toggle active class
                filterTags.forEach(t => t.classList.remove('active'));
                this.classList.add('active');

                // Add visual feedback
                const productsGrid = document.querySelector('.products-grid');
                if (productsGrid) {
                    productsGrid.style.opacity = '0.5';
                    setTimeout(() => {
                        productsGrid.style.opacity = '1';
                    }, 300);
                }
            });
        });

        // Active filter tag removal
        const activeFilterTags = document.querySelectorAll('.filter-tag.active');
        activeFilterTags.forEach(tag => {
            tag.addEventListener('click', function() {
                // This would normally remove the filter
                // For the search term, redirect to the search page without the term
                if (this.textContent.includes('Search:')) {
                    window.location.href = window.location.pathname;
                }
            });
        });

        // Add to cart animation
        const addToCartButtons = document.querySelectorAll('.add-to-cart-icon');
        addToCartButtons.forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');

                // Create notification element
                const notification = document.createElement('div');
                notification.style.position = 'fixed';
                notification.style.bottom = '20px';
                notification.style.right = '20px';
                notification.style.background = 'rgba(99, 102, 241, 0.9)';
                notification.style.color = 'white';
                notification.style.padding = '12px 20px';
                notification.style.borderRadius = '5px';
                notification.style.zIndex = '1000';
                notification.style.transform = 'translateY(100px)';
                notification.style.opacity = '0';
                notification.style.transition = 'all 0.3s ease';
                notification.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.1)';
                notification.style.display = 'flex';
                notification.style.alignItems = 'center';
                notification.style.fontWeight = '500';

                notification.innerHTML = '<i class="fas fa-check-circle" style="margin-right: 10px;"></i> Product added to your cart!';

                document.body.appendChild(notification);

                // Show notification
                setTimeout(() => {
                    notification.style.transform = 'translateY(0)';
                    notification.style.opacity = '1';
                }, 10);

                // Hide and remove notification
                setTimeout(() => {
                    notification.style.transform = 'translateY(100px)';
                    notification.style.opacity = '0';

                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);

                // Animate cart icon
                this.classList.add('clicked');
                setTimeout(() => {
                    this.classList.remove('clicked');
                }, 700);

                // Add a small animation to the icon
                this.style.animation = 'none';
                setTimeout(() => {
                    this.style.animation = 'pulse 0.5s';
                }, 0);
            });
        });

        // Add pulse animation
        const style = document.createElement('style');
        style.innerHTML = `
    @@keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.2); }
                100% { transform: scale(1); }
            }
            .clicked {
                background: #6366f1 !important;
                color: white !important;
            }
        `;
        document.head.appendChild(style);

        // Add hover effect to product cards with intersection observer
        if ('IntersectionObserver' in window) {
            const productCards = document.querySelectorAll('.product-card');

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            productCards.forEach(card => {
                observer.observe(card);
            });
        }
    });
</script>