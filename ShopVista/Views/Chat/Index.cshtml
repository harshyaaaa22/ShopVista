@model List<UserViewModel>
@{
    ViewData["Title"] = "Chat";
}

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Users list -->
        <div class="col-md-3 border-right">
            <div class="d-flex flex-column">
                <div class="p-2 border-bottom">
                    <h4>Users</h4>
                </div>
                <div class="users-list">
                    @foreach (var user in Model)
                    {
                        <div class="user-item d-flex align-items-center p-2 border-bottom cursor-pointer"
                             onclick="selectUser('@user.Id', '@user.FullName')"
                             style="cursor: pointer;">
                            <img src="@user.ProfilePictureUrl" class="rounded-circle mr-2" width="40" height="40" alt="@user.FullName" />
                            <div class="ml-2">
                                <div class="font-weight-bold">@user.FullName</div>
                                <div class="small text-muted">@user.Email</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Chat area -->
        <div class="col-md-9">
            <div id="chat-area" class="d-flex flex-column h-100">
                <div id="chat-header" class="p-2 border-bottom">
                    <h4 id="selected-user-name">Select a user to start chatting</h4>
                </div>
                <div id="messages-container" class="flex-grow-1 p-3" style="height: 70vh; overflow-y: auto;">
                    <!-- Messages will be shown here -->
                </div>
                <div id="chat-input" class="p-2 border-top">
                    <div class="input-group">
                        <input type="text" id="message-input" class="form-control" placeholder="Type your message..." disabled />
                        <div class="input-group-append">
                            <button id="send-button" class="btn btn-primary" disabled>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        // Current user info
        const currentUserId = '@ViewBag.CurrentUserId';
        const currentUserName = '@ViewBag.CurrentUserName';

        // Selected user info
        let selectedUserId = null;
        let selectedUserName = null;

        // DOM elements
        const messagesContainer = document.getElementById('messages-container');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const selectedUserNameElement = document.getElementById('selected-user-name');

        // SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Start SignalR connection
        connection.start()
            .then(() => {
                console.log("SignalR Connected!");
            })
            .catch(err => {
                console.error("SignalR Connection Error: ", err);
                alert("Could not connect to chat service. Please refresh the page.");
            });

        // Handle receiving messages
        connection.on("ReceiveMessage", (senderId, message) => {
            console.log("Received message from: ", senderId);
            if (senderId === selectedUserId) {
                appendMessage(message, 'received');
            }
        });

        connection.on("MessageSent", (receiverId, message) => {
            console.log("Message sent to: ", receiverId);
            if (receiverId === selectedUserId) {
                appendMessage(message, 'sent');
            }
        });

        // User selection function (called directly from onclick)
        function selectUser(userId, userName) {
            console.log("Selecting user: ", userId, userName);
            selectedUserId = userId;
            selectedUserName = userName;

            // Update UI
            document.querySelectorAll('.user-item').forEach(u => u.classList.remove('active', 'bg-light'));
            document.querySelector(`.user-item[onclick*="${userId}"]`).classList.add('active', 'bg-light');
            selectedUserNameElement.textContent = userName;

            // Enable chat input
            messageInput.disabled = false;
            sendButton.disabled = false;

            // Clear messages and load chat history
            messagesContainer.innerHTML = '';
            loadChatHistory(selectedUserId);

            // Focus on input field
            messageInput.focus();
        }

        // Send message
        sendButton.addEventListener('click', sendMessage);

        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

                function sendMessage() {
            const message = messageInput.value.trim();
            if (!selectedUserId) {
                alert("Please select a user before sending a message.");
                return;
            }
            if (message) {
                console.log("Sending message to: ", selectedUserId);
                connection.invoke("SendMessage", selectedUserId, message)
                    .then(() => {
                        messageInput.value = ''; // Clear input after sending
                    })
                    .catch(err => {
                        console.error("Error sending message: ", err);
                        alert("Failed to send message. Please try again.");
                    });
            }
        }


        // Helper functions
        function appendMessage(message, type) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type} mb-2 p-2`;
            messageElement.style.maxWidth = '70%';
            messageElement.style.borderRadius = '10px';
            messageElement.style.backgroundColor = type === 'sent' ? '#dcf8c6' : '#f1f0f0';
            messageElement.textContent = message;

            const wrapper = document.createElement('div');
            wrapper.className = 'd-flex';
            wrapper.style.justifyContent = type === 'sent' ? 'flex-end' : 'flex-start';
            wrapper.appendChild(messageElement);

            messagesContainer.appendChild(wrapper);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        async function loadChatHistory(userId) {
            try {
                console.log("Loading chat history for: ", userId);
                const response = await fetch(`/Chat/GetChatHistory?userId=${userId}`);
                if (!response.ok) {
                    throw new Error('Error fetching chat history');
                }
                const messages = await response.json();

                messages.forEach(msg => {
                    const type = msg.senderId === currentUserId ? 'sent' : 'received';
                    appendMessage(msg.content, type);
                });
            } catch (error) {
                console.error('Error loading chat history:', error);
                messagesContainer.innerHTML = '<div class="text-center text-muted">Failed to load messages</div>';
            }
        }
    </script>
}